Brute-Force Approach

public int[] twoSum(int[] nums, int target) {
        int ar[]=nums;
        int []ans=new int[2];
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(ar[i]+ar[j]==target){
                    ans[0]=i;
                    ans[1]=j;
                }
            }
        }
        return ans;
    }

Optimised approach(using HashMap)
public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> map=new HashMap<>();
        int ans[]=new int[2];
        for(int i=0;i<nums.length;i++){
            map.put(nums[i],i);
        }
        
        for( int i=0;i<nums.length;i++){
            int comp=target-nums[i];
            if(map.containsKey(comp) && map.get(comp)!=i){
                ans[0]=i;
                ans[1]=map.get(comp);
            }
        }
        return ans;
}