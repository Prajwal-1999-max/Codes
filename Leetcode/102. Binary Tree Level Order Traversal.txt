/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q1=new LinkedList<TreeNode>();
         Queue<TreeNode> q2=new LinkedList<TreeNode>();
        List<List<Integer>> ans=new ArrayList<List<Integer>>();
        
        if(root == null){
            return ans;
        }
        q2.add(root);
        
        while(q2.peek() != null ){
            List<Integer> temp=new ArrayList<Integer>();
            while(q2.peek() != null){
                temp.add(q2.peek().val);
                
                if(q2.peek().left!=null)
                q1.add(q2.peek().left);
                
                if(q2.peek().right!=null)
                q1.add(q2.peek().right);
                q2.remove();
            }
            while(q1.peek() != null){
                q2.add(q1.peek());
                    q1.remove();
            }
            // q2=q1;
            // q1.clear();
            ans.add(temp);
        }
           return ans; 
    
    }
}

OR
List<List<Integer>> res = new ArrayList<>();
  
if (root == null) return res;
  
Queue<TreeNode> queue = new LinkedList<>();
  
queue.add(root);
  
while (!queue.isEmpty())
 {
  
  List<Integer> level = new ArrayList<>();
  
  int cnt = queue.size();
  
  for (int i = 0; i < cnt; i++) {
  
    TreeNode node = queue.poll();
  
    level.add(node.val);
  
    if (node.left != null) {
  
      queue.add(node.left);
  
    }

    if (node.right != null) 
{  
      queue.add(node.right);
  
    }
  
  }
  
  res.add(level);
   
}
  
return res;
