/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans=new ArrayList<List<Integer>>();
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(q.peek()!=null){
            List<Integer> temp=new ArrayList<>();
            int len=q.size();
            for(int i=0;i<len;i++){
                if(q.peek().left!=null){
                    q.add(q.peek().left);
                }
                if(q.peek().right!=null){
                    q.add(q.peek().right);
                }
                temp.add(q.peek().val);
                q.remove();
            }
            ans.add(0,temp);
        }
        //THE ABOVE LINE IS USED TO REPLACE THE BELOW code to make the whole array oolta
//         List<List<Integer>> revans = new ArrayList<List<Integer>>();
//         for (int i = ans.size() - 1; i >= 0; i--) {
 
//             // Append the elements in reverse order
//             revans.add(ans.get(i));
//         }
        return ans;
    }
}