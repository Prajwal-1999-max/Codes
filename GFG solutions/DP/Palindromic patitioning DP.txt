// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            String str = in.readLine();
            Solution ob = new Solution();
            System.out.println(ob.palindromicPartition(str));
        }
    }
}// } Driver Code Ends


//User function Template for Java

class Solution{
    static int dp[][]=new int[1001][1001];
    
    static int palindromicPartition(String str)
    {
        // code here
        
        for(int i=0;i<1001;i++)
        Arrays.fill(dp[i],-1);
        return palindrome(str,0,str.length()-1);
    }
    static int palindrome(String str, int i,int j){
        if(i>=j)
        return 0;
        
        if(isPalindrome(str,i,j)==true)
        return 0;
        
         if(dp[i][j]!=-1)
         return dp[i][j];
         
        int ans=str.length()-1;
        for(int k=i;k<j;k++){
            int temp=1+palindrome(str,i,k)+palindrome(str,k+1,j);
            
            ans=Math.min(ans,temp);
            
        }
        return dp[i][j]=ans;
    }
    static boolean isPalindrome(String string, int i, int j)
  {
    while(i < j)
    {
      if(string.charAt(i) != string.charAt(j))
        return false; 
      i++;
      j--;
    }
    return true;
  }
 
}