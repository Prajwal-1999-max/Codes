class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        int color=image[sr][sc];
        if(color!=newColor)
            dfs(image,sr,sc,color,newColor);
        return image;
    }
    public void dfs(int [][]image, int sr, int sc, int color, int newColor){
        if(image[sr][sc]==color){
            image[sr][sc]=newColor;
            if(sr>=1)
                dfs(image,sr-1,sc,color,newColor);
            if(sc>=1)
                dfs(image,sr,sc-1,color,newColor);
            if((sr+1)<image.length)
                dfs(image,sr+1,sc,color,newColor);
            if((sc+1)<image[0].length)
                dfs(image,sr,sc+1,color,newColor);
            
        }
    }
}
-------------------------------------------------------------------------
OR

--------------------------------------------------------------------------
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
     if(image.length<0)
         return null;
        
        if(image[sr][sc]!=newColor){
            int prevColor=image[sr][sc];
            
            func(image,sr, sc, newColor,prevColor);
        }
        return image;
    }
    public void func(int[][] image, int sr, int sc, int newColor,int prevColor){
        if(sr<0 || sc<0 || sr>=image.length || sc>=image[0].length)
            return;
        
        if(image[sr][sc]==prevColor){
            image[sr][sc]=newColor;
            func(image,sr-1, sc, newColor,prevColor);
            func(image,sr, sc-1, newColor,prevColor);
            func(image,sr+1, sc, newColor,prevColor);
            func(image,sr, sc+1, newColor,prevColor);
        }
    }
}