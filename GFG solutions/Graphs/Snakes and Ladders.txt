class Solution {
    public int snakesAndLadders(int[][] board) {
        int n=board.length;
        boolean visited[][]=new boolean[board.length][board.length];
        Queue<Integer> q=new LinkedList<Integer>();
        int steps=0;
        q.add(1);
        visited[n-1][0]=true;
        while(q.size()>0){
            int size=q.size();
            
            for(int i=0;i<size;i++){
                int x=q.peek();
                q.remove();
                if(x==n*n)
                    return steps;
                for(int k=1;k<=6;k++){
                    if(x+k>n*n)
                        break;
                    
                    int pos[]=findCoordinates(x+k,n);
                    int r=pos[0];
                    int c=pos[1];
                    if(visited[r][c]==true)
                        continue;
                    visited[r][c]=true;
                    if(board[r][c]==-1)
                        q.add(x+k);
                    else
                        q.add(board[r][c]);
                }
            }
            steps++;
        }
        return -1;
    }
    public int[] findCoordinates(int curr,int n){
        int r=n-(curr-1)/n -1;
        int c=(curr-1)%n; 
        if(r%2 ==n%2)
            return new int[]{r,n-1-c};
        else
            return new int[]{r,c};
    }
}